{"version":3,"sources":["components/Field/index.tsx","components/Form/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Field","props","label","type","value","name","variant","options","onChange","required","className","map","option","key","id","maxLength","renderField","INPUT_NAMES","ACCEPTED_CARDS","Form","useState","cardType","setCardType","cardNumber","setCardNumber","expiry","setExpiry","userName","setUserName","userEmail","setUserEmail","cardsOptions","setCardsOptions","responseMsg","setResponseMsg","handleChange","e","inputName","target","inputValue","maskedValue","cardNumberFormat","expiryValue","expiryFormat","nameFormatted","nameFormat","regex","replace","$1","$2","$3","$4","filter","group","join","length","substr","useEffect","fetch","then","response","json","data","filteredCards","cardTypes","card","includes","isSubmitEnabled","invoiceNo","responseMessage","onSubmit","preventDefault","FormData","method","body","catch","error","console","log","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.47c7082a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype FieldTypes = \"text\" | \"email\";\r\ntype FieldVariants = \"default\" | \"select\" | \"card-number\" | \"expiry\";\r\nexport type SelectOption = { id: \"string\"; value: \"string\" };\r\nexport type ReactEv =\r\n\t| React.ChangeEvent<HTMLInputElement>\r\n\t| React.ChangeEvent<HTMLSelectElement>;\r\n\r\ninterface FieldInterface {\r\n\tname: string;\r\n\ttype?: FieldTypes;\r\n\tvalue: any;\r\n\tlabel?: string;\r\n\tvariant?: FieldVariants;\r\n\toptions?: SelectOption[];\r\n\trequired?: boolean;\r\n\tonChange?: (event: ReactEv) => void;\r\n}\r\n\r\nexport const Field: React.FC<FieldInterface> = (props) => {\r\n\tconst {\r\n\t\tlabel,\r\n\t\ttype,\r\n\t\tvalue,\r\n\t\tname,\r\n\t\tvariant,\r\n\t\toptions,\r\n\t\tonChange,\r\n\t\trequired,\r\n\t} = props;\r\n\r\n\tconst renderField = () => {\r\n\t\tswitch (variant) {\r\n\t\t\tcase \"select\":\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<select\r\n\t\t\t\t\t\tname={name}\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\tclassName=\"form__select\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{options?.map((option) => (\r\n\t\t\t\t\t\t\t<option key={option.id} value={option.value}>\r\n\t\t\t\t\t\t\t\t{option.value}\r\n\t\t\t\t\t\t\t</option>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</select>\r\n\t\t\t\t);\r\n\t\t\tcase \"card-number\":\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tname={name}\r\n\t\t\t\t\t\ttype={type || \"text\"}\r\n\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\trequired={required}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\r\n\t\t\tcase \"expiry\":\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tname={name}\r\n\t\t\t\t\t\ttype={type || \"text\"}\r\n\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\tclassName=\"form__input-expiry\"\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\tmaxLength={5}\r\n\t\t\t\t\t\trequired={required}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\r\n\t\t\tdefault:\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tname={name}\r\n\t\t\t\t\t\ttype={type || \"text\"}\r\n\t\t\t\t\t\tvalue={value}\r\n\t\t\t\t\t\tonChange={onChange}\r\n\t\t\t\t\t\tmaxLength={50}\r\n\t\t\t\t\t\trequired={required}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<label className=\"form__label\">\r\n\t\t\t<p>{label}:</p> {renderField()}\r\n\t\t</label>\r\n\t);\r\n};\r\n\r\nexport default Field;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport Field from \"../Field\";\r\nimport { SelectOption, ReactEv } from \"../Field\";\r\n\r\nconst INPUT_NAMES = {\r\n\tCARD_TYPES: \"cardTypes\",\r\n\tCARD_NUMBER: \"cardNumber\",\r\n\tEXPIRY: \"expiry\",\r\n\tUSR_NAME: \"userName\",\r\n\tUSR_EMAIL: \"userEmail\",\r\n};\r\n\r\nconst CARDS_API = \"https://www.mocky.io/v2/5d145fa22f0000ff3ec4f030\";\r\nconst SUCCESS_API = \"https://www.mocky.io/v2/5d8de422310000b19d2b517a\";\r\nconst ACCEPTED_CARDS = [\"Visa\", \"MasterCard\", \"Amex\"];\r\n\r\nexport const Form = () => {\r\n\tconst [cardType, setCardType] = useState<string>(\"\");\r\n\tconst [cardNumber, setCardNumber] = useState<string>(\"\");\r\n\tconst [expiry, setExpiry] = useState<string>(\"\");\r\n\tconst [userName, setUserName] = useState<string>(\"\");\r\n\tconst [userEmail, setUserEmail] = useState<string>(\"\");\r\n\tconst [cardsOptions, setCardsOptions] = useState<SelectOption[]>();\r\n\tconst [responseMsg, setResponseMsg] = useState<{\r\n\t\tinvoiceNo: string;\r\n\t\tresponseMessage: string;\r\n\t}>();\r\n\r\n\tconst handleChange = (e: ReactEv) => {\r\n\t\tconst inputName = e.target.name;\r\n\t\tconst inputValue = e.target.value;\r\n\r\n\t\tswitch (inputName) {\r\n\t\t\tcase INPUT_NAMES.CARD_TYPES:\r\n\t\t\t\tsetCardType(inputValue);\r\n\t\t\t\tbreak;\r\n\t\t\tcase INPUT_NAMES.CARD_NUMBER:\r\n\t\t\t\tconst maskedValue = cardNumberFormat(inputValue);\r\n\t\t\t\tsetCardNumber(maskedValue);\r\n\t\t\t\tbreak;\r\n\t\t\tcase INPUT_NAMES.EXPIRY:\r\n\t\t\t\tconst expiryValue = expiryFormat(inputValue);\r\n\t\t\t\tsetExpiry(expiryValue);\r\n\t\t\t\tbreak;\r\n\t\t\tcase INPUT_NAMES.USR_NAME:\r\n\t\t\t\tconst nameFormatted = nameFormat(inputValue);\r\n\t\t\t\tsetUserName(nameFormatted);\r\n\t\t\t\tbreak;\r\n\t\t\tcase INPUT_NAMES.USR_EMAIL:\r\n\t\t\t\tsetUserEmail(inputValue);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t};\r\n\r\n\tconst cardNumberFormat = (value: string) => {\r\n\t\tconst amexRegex = /^(\\d{0,4})(\\d{0,4})(\\d{0,4})(\\d{0,3})\\d{0,15}$/g;\r\n\t\tlet regex = /^(\\d{0,4})(\\d{0,4})(\\d{0,4})(\\d{0,4})\\d{0,16}$/g;\r\n\t\tif (cardType === \"Amex\") {\r\n\t\t\tregex = amexRegex;\r\n\t\t}\r\n\t\tconst onlyNumbers = value.replace(/[^\\d]/g, \"\");\r\n\r\n\t\treturn onlyNumbers.replace(\r\n\t\t\tregex,\r\n\t\t\t(regex: any, $1: any, $2: any, $3: any, $4: any) =>\r\n\t\t\t\t[$1, $2, $3, $4].filter((group) => !!group).join(\" \")\r\n\t\t);\r\n\t};\r\n\r\n\tconst expiryFormat = (value: string) => {\r\n\t\tif (value.length >= 2) {\r\n\t\t\tvalue = value.substr(0, 2) + \"/\" + (value.substr(3) || \"\");\r\n\t\t}\r\n\t\treturn value;\r\n\t};\r\n\r\n\tconst nameFormat = (value: string) => {\r\n\t\tconst onlyLetters = value.replace(/[^a-zA-Z]+/g, \"\");\r\n\t\treturn onlyLetters;\r\n\t};\r\n\r\n\tconst handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n\t\te.preventDefault();\r\n\t\tconst data = new FormData(e.target as HTMLFormElement);\r\n\r\n\t\tfetch(SUCCESS_API, {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\tbody: data,\r\n\t\t})\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\tsetResponseMsg({\r\n\t\t\t\t\tinvoiceNo: data.invoiceNo,\r\n\t\t\t\t\tresponseMessage: data.responseMessage,\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tfetch(CARDS_API)\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((data) => {\r\n\t\t\t\tconst filteredCards = data.cardTypes.filter((card: any) =>\r\n\t\t\t\t\tACCEPTED_CARDS.includes(card.value)\r\n\t\t\t\t);\r\n\t\t\t\tsetCardsOptions(filteredCards);\r\n\t\t\t\tsetCardType(filteredCards[0].value);\r\n\t\t\t});\r\n\t}, []);\r\n\r\n\tconst isSubmitEnabled =\r\n\t\tcardType.length > 0 &&\r\n\t\tcardNumber.length > 0 &&\r\n\t\texpiry.length > 0 &&\r\n\t\tuserName.length > 0;\r\n\treturn (\r\n\t\t<div className=\"content\">\r\n\t\t\t{responseMsg ? (\r\n\t\t\t\t<div className=\"text-blue\">\r\n\t\t\t\t\t<p>{responseMsg.invoiceNo}</p>\r\n\t\t\t\t\t<p>{responseMsg.responseMessage}</p>\r\n\t\t\t\t</div>\r\n\t\t\t) : (\r\n\t\t\t\t<form className=\"form\" onSubmit={handleSubmit}>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tname={INPUT_NAMES.CARD_TYPES}\r\n\t\t\t\t\t\tlabel=\"Card Types\"\r\n\t\t\t\t\t\tvariant=\"select\"\r\n\t\t\t\t\t\tvalue={cardType}\r\n\t\t\t\t\t\toptions={cardsOptions}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tname={INPUT_NAMES.CARD_NUMBER}\r\n\t\t\t\t\t\tlabel=\"Card Number\"\r\n\t\t\t\t\t\tvalue={cardNumber}\r\n\t\t\t\t\t\tvariant=\"card-number\"\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tname={INPUT_NAMES.EXPIRY}\r\n\t\t\t\t\t\tlabel=\"Expiry\"\r\n\t\t\t\t\t\tvalue={expiry}\r\n\t\t\t\t\t\tvariant=\"expiry\"\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tname={INPUT_NAMES.USR_NAME}\r\n\t\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\t\tvalue={userName}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Field\r\n\t\t\t\t\t\tname={INPUT_NAMES.USR_EMAIL}\r\n\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\tvalue={userEmail}\r\n\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\trequired={false}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<button type=\"submit\" disabled={!isSubmitEnabled}>\r\n\t\t\t\t\t\tConfirm payment\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</form>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport \"./App.scss\";\n\nimport Form from \"./components/Form\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"head-section\">\n\t\t\t\t<p className=\"text\">Product: ABCD</p>\n\t\t\t\t<p className=\"text\">Date: 08/09/2019 12:03:44</p>\n\t\t\t\t<p className=\"text\">Amount: 1123.03 USD</p>\n\t\t\t</div>\n\t\t\t<Form />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}